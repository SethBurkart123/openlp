name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            libdbus-1-dev \
            libdbus-glib-1-dev \
            libenchant-2-2 \
            libenchant-2-dev \
            libicu-dev \
            pkg-config
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install \
            enchant \
            dbus \
            dbus-glib \
            icu4c \
            pkg-config
          # Set up ICU environment for macOS
          ICU_PREFIX=$(brew --prefix icu4c)
          echo "PKG_CONFIG_PATH=${ICU_PREFIX}/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "PATH=${ICU_PREFIX}/bin:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L${ICU_PREFIX}/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${ICU_PREFIX}/include" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Windows doesn't need dbus-python (Linux-only) but needs ICU for PyICU
          echo "Installing Windows system dependencies..."
          
          # Install ICU via chocolatey
          choco install -y icu
          
          # Try to find ICU installation and set environment variables
          # Common ICU installation paths on Windows
          for ICU_PATH in "/c/tools/icu" "/c/Program Files/ICU" "/c/Program Files (x86)/ICU"; do
            if [ -d "$ICU_PATH" ]; then
              echo "Found ICU at $ICU_PATH"
              echo "ICU_ROOT=$ICU_PATH" >> $GITHUB_ENV
              echo "ICU_VERSION=73.2" >> $GITHUB_ENV
              echo "PATH=$ICU_PATH/bin:$PATH" >> $GITHUB_ENV
              break
            fi
          done
          
          # If ICU still not found, try to use pre-built wheels approach
          if [ ! -d "/c/tools/icu" ] && [ ! -d "/c/Program Files/ICU" ]; then
            echo "ICU not found, will try alternative PyICU installation"
            echo "PYICU_USE_BINARY=1" >> $GITHUB_ENV
          fi
        fi
      shell: bash

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Use the same approach as build.yml for Windows - install dependencies manually
        python -m pip install --upgrade pip
        pip install alembic beautifulsoup4 chardet flask flask-cors lxml Mako packaging platformdirs PySide6 QtAwesome qrcode requests SQLAlchemy waitress websockets macholib pyinstaller fastmcp
        # Install test-specific dependencies
        pip install pytest pytest-qt flake8 pyodbc pysword
        # Try to install PyICU from wheel, fallback to source if needed
        pip install --only-binary=PyICU PyICU || pip install PyICU

    - name: Sync dependencies (Non-Windows)
      if: runner.os != 'Windows'
      run: uv sync --extra test

    - name: Generate resources
      run: |
        # Generate the Qt resources file that contains icons and images
        if [ "$RUNNER_OS" == "Windows" ]; then
          pyside6-rcc -g python -o openlp/core/resources.py.new resources/images/openlp-2.qrc
        else
          uv run pyside6-rcc -g python -o openlp/core/resources.py.new resources/images/openlp-2.qrc
        fi
        # Add proper header and remove first 5 lines (comments)
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Windows PowerShell version
          powershell -Command "
            \$header = '# -*- coding: utf-8 -*-`n`n##########################################################################`n# OpenLP - Open Source Lyrics Projection                                 #`n# ---------------------------------------------------------------------- #`n# Copyright (c) 2008-2024 OpenLP Developers                              #`n# ---------------------------------------------------------------------- #`n# This program is free software: you can redistribute it and/or modify   #`n# it under the terms of the GNU General Public License as published by   #`n# the Free Software Foundation, either version 3 of the License, or      #`n# (at your option) any later version.                                    #`n#                                                                        #`n# This program is distributed in the hope that it will be useful,        #`n# but WITHOUT ANY WARRANTY; without even the implied warranty of         #`n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #`n# GNU General Public License for more details.                           #`n#                                                                        #`n# You should have received a copy of the GNU General Public License      #`n# along with this program.  If not, see <https://www.gnu.org/licenses/>. #`n##########################################################################`n\`"\`"`nThe :mod:\`\`resources\`\` module provides application images and icons in a central`nstore for use by OpenLP.`n\`"\`"`n';
            \$content = Get-Content openlp/core/resources.py.new | Select-Object -Skip 5;
            \$header + (\$content -join \"`n\") | Out-File openlp/core/resources.py -Encoding utf8;
            Remove-Item openlp/core/resources.py.new
          "
        else
          # Unix version
          cat > openlp/core/resources.py << 'EOF'
        # -*- coding: utf-8 -*-

        ##########################################################################
        # OpenLP - Open Source Lyrics Projection                                 #
        # ---------------------------------------------------------------------- #
        # Copyright (c) 2008-2024 OpenLP Developers                              #
        # ---------------------------------------------------------------------- #
        # This program is free software: you can redistribute it and/or modify   #
        # it under the terms of the GNU General Public License as published by   #
        # the Free Software Foundation, either version 3 of the License, or      #
        # (at your option) any later version.                                    #
        #                                                                        #
        # This program is distributed in the hope that it will be useful,        #
        # but WITHOUT ANY WARRANTY; without even the implied warranty of         #
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
        # GNU General Public License for more details.                           #
        #                                                                        #
        # You should have received a copy of the GNU General Public License      #
        # along with this program.  If not, see <https://www.gnu.org/licenses/>. #
        ##########################################################################
        """
        The :mod:`resources` module provides application images and icons in a central
        store for use by OpenLP.
        """
        EOF
          tail -n +6 openlp/core/resources.py.new >> openlp/core/resources.py
          rm -f openlp/core/resources.py.new
        fi
      shell: bash

    - name: Run tests
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          python -m pytest tests/ -v --tb=short
        else
          uv run python -m pytest tests/ -v --tb=short
        fi
      shell: bash